# Choo-Choo motherf*cker
make_railways = {
	every_scope_state = {
		if = {
			limit = { state_infrastructure_balance < 0 }
			if = {
				limit = { NOT = { any_scope_building = { is_building_type = building_railway } } }
				create_building = { building = building_railway level = 1 }
				set_variable = must_destroy_building
				else = { set_variable = { name = must_destroy_building value = no } }
			}
			if = {
				limit = { any_scope_building = { is_building_type = building_railway } }
				set_variable = {
					name = infra_per_railroad
					value = {
						# Base
						# if		= { limit = { NOT = { has_building = building_railway } }																					value		=  20 }
						# Fallback for when you don't have any railway at all - Nonsense since we always build one first
						else_if	= { limit = { any_scope_building = { is_building_type = building_railway has_active_production_method = pm_early_trains } }					value		=  20 }
						else_if	= { limit = { any_scope_building = { is_building_type = building_railway has_active_production_method = pm_steam_trains } }					value		=  25 }
						else_if	= { limit = { any_scope_building = { is_building_type = building_railway has_active_production_method = pm_rotary_valve_steam_trains } }	value		=  30 }
						else_if	= { limit = { any_scope_building = { is_building_type = building_railway has_active_production_method = pm_electric_trains } }				value		=  50 }
						else_if	= { limit = { any_scope_building = { is_building_type = building_railway has_active_production_method = pm_diesel_trains } }				value		=  60 }
						else_if	= { limit = { any_scope_building = { is_building_type = building_railway has_active_production_method = pm_diesel_electric_trains } }		value		=  80 }
						else_if	= { limit = { any_scope_building = { is_building_type = building_railway has_active_production_method = pm_jet_electric_trains } }			value		= 100 }
						else_if	= { limit = { any_scope_building = { is_building_type = building_railway has_active_production_method = pm_maglev_trains } }				value		= 150 }
						# Passengers
						if		= { limit = { any_scope_building = { is_building_type = building_railway has_active_production_method = pm_wooden_passenger_carriages } }	subtract	=   5 }
						else_if	= { limit = { any_scope_building = { is_building_type = building_railway has_active_production_method = pm_steel_passenger_carriages } }	subtract	=   5 }
						else_if	= { limit = { any_scope_building = { is_building_type = building_railway has_active_production_method = pm_high_speed_rail } }				subtract	=  10 }
						# Rails
						if		= { limit = { any_scope_building = { is_building_type = building_railway has_active_production_method = pm_normal_rails } }					add			=   5 }
						else_if	= { limit = { any_scope_building = { is_building_type = building_railway has_active_production_method = pm_electric_rails } }				add			=  10 }
						else_if	= { limit = { any_scope_building = { is_building_type = building_railway has_active_production_method = pm_resistive_breaks } }				add			=  10 }
						else_if	= { limit = { any_scope_building = { is_building_type = building_railway has_active_production_method = pm_rail_signals } }					add			=  20 }
					}
				}
			}
			if = { limit = { var:must_destroy_building = yes } remove_building = building_railway }
			set_variable = {
				name = missing_railways
				value = {
					add = {
						value = state_infrastructure_balance
						multiply = -1
						add = var:infra_per_railroad
						subtract = 0.5 # add infra_per_railroad - 0.5 to ensure ceiling at divison
						divide = var:infra_per_railroad
					}
					if = {
						limit = { any_scope_building = { is_building_type = building_railway occupancy < 0.95 occupancy > 0 } }
						multiply = 0.0
					}
				}
			}
			if = {
				limit = { var:missing_railways > 0 }
				while = {
					count = var:missing_railways
					start_building_construction = building_railway
				}
			}
		}
	}
}
make_ports = {
	every_scope_state = {
		if = {
			limit = { state_infrastructure_balance < 0 }
			if = {
				limit = { NOT = { any_scope_building = { is_building_type = building_port } } }
				create_building = { building = building_port level = 1 }
				set_variable = must_destroy_building
			}
			else = { set_variable = { name = must_destroy_building value = no } }
			if = {
				limit = { any_scope_building = { is_building_type = building_port } }
				set_variable = {
					name = infra_per_port
					value = {
						if		= { limit = { any_scope_building = { is_building_type = building_port has_active_production_method = pm_anchorage } }		value =  5 }
						else_if	= { limit = { any_scope_building = { is_building_type = building_port has_active_production_method = pm_basic_port } }		value = 10 }
						else_if	= { limit = { any_scope_building = { is_building_type = building_port has_active_production_method = pm_industrial_port } } value = 15 }
						else_if	= { limit = { any_scope_building = { is_building_type = building_port has_active_production_method = pm_modern_port } }		value = 25 }
					}
				}
			}
			if = { limit = { var:must_destroy_building = yes } remove_building = building_port }
			set_variable = {
				name = missing_ports
				value = {
					add = {
						value = state_infrastructure_balance
						multiply = -1
						add = var:infra_per_port
						subtract = 0.5 # add infra_per_port - 0.5 to ensure ceiling at divison
						divide = var:infra_per_port
					}
				}
			}
			if = {
				limit = {
					var:missing_ports > 0
					any_scope_building = {
						is_building_type = building_port
						can_queue_building_levels >= var:missing_ports
					}
				}
				while = {
					count = var:missing_ports
					start_building_construction = building_port
				}
			}
		}
	}
}
make_admins = {
	if = { limit = { has_law = law_type:law_appointed_bureaucrats } set_variable = has_law_appointed_bureaucrats }
	else = { set_variable = { name = has_law_appointed_bureaucrats value = no } }
	every_scope_state = {
		set_variable = {
			name = tax_capacity_balance
			value = { add = { value = tax_capacity subtract = tax_capacity_usage } }
		}
		if = {
			limit = {
				OR = {
					is_incorporated = yes
					incorporation_progress > 0
				}
				var:tax_capacity_balance < 0
			}
			if = {
				limit = { NOT = { any_scope_building = { is_building_type = building_government_administration } } }
				create_building = { building = building_government_administration level = 1 }
				set_variable = must_destroy_building
			}
			else = { set_variable = { name = must_destroy_building value = no } }
			set_variable = {
				name = tax_capacity_per_building
				value = {
					if		= { limit = { is_production_method_active = { building_type = building_government_administration production_method = pm_simple_organization } }			value =  5 }
					else_if	= { limit = { is_production_method_active = { building_type = building_government_administration production_method = pm_horizontal_drawer_cabinets } }	value = 10 }
					else_if	= { limit = { is_production_method_active = { building_type = building_government_administration production_method = pm_vertical_filing_cabinets } }	value = 15 }
					else_if	= { limit = { is_production_method_active = { building_type = building_government_administration production_method = pm_switch_boards } }				value = 30 }
				}
			}
			if = { limit = { var:must_destroy_building = yes } remove_building = building_government_administration }
			set_variable = {
				name = missing_buildings
				value = {
					add = {
						value = var:tax_capacity_balance
						multiply = -1
						add = var:tax_capacity_per_building
						subtract = 1 # add tax_capacity_per_building - 1 to make division round up
						divide = var:tax_capacity_per_building
					}
				}
			}
			if = {
				limit = { var:missing_buildings > 0 }
				if = {
					limit = { prev.var:has_law_appointed_bureaucrats = yes }
					# appointed_bureaucrats add extra 25% more taxation so we need 20% less buildings for same effect
					# missing_buildings = ceil(missing_buildings/1.25)
					change_variable = {
						name = missing_buildings
						add = 1.24 # add 1.24 - 0.01 to ensure ceiling
						multiply = 0.8
					}
				}
				while = {
					count = var:missing_buildings
					start_building_construction = building_government_administration
				}
			}
		}
	}
}
# Spicy Lightning
make_powerplants = {
	every_scope_state = {
		if = {
			limit = { sg:electricity = { state_goods_delta < 1 } }
			if = {
				limit = { NOT = { any_scope_building = { is_building_type = building_power_plant } } }
				create_building = { building = building_power_plant level = 1 }
				set_variable = must_destroy_building
				else = { set_variable = { name = must_destroy_building value = no } }
			}
			if = {
				limit = { any_scope_building = { is_building_type = building_power_plant } }
				set_variable = {
					name = power_per_plant
					value = {
						if		= { limit = { any_scope_building = { is_building_type = building_power_plant has_active_production_method = pm_hydroelectric_plant } }					value		= 100 }
						else_if	= { limit = { any_scope_building = { is_building_type = building_power_plant has_active_production_method = pm_coal-fired_plant } }						value		= 150 }
						else_if	= { limit = { any_scope_building = { is_building_type = building_power_plant has_active_production_method = pm_oil-fired_plant } }						value		= 200 }
						if		= { limit = { any_scope_building = { is_building_type = building_power_plant has_active_production_method = pm_steam_rail_transport_power_plant		} }						multiply	= 1.5 }
						else_if	= { limit = { any_scope_building = { is_building_type = building_power_plant has_active_production_method = pm_electric_rail_transport_power_plant	} }	subtract	=   2	multiply	= 2   }
						else_if	= { limit = { any_scope_building = { is_building_type = building_power_plant has_active_production_method = pm_diesel_rail_transport_power_plant 	} }						multiply	= 2   }
					}
				}
			}
			if = { limit = { var:must_destroy_building = yes } remove_building = building_power_plant }
			set_variable = {
				name = missing_powerplants
				value = {
					value = 0
					sg:electricity = { add = state_goods_delta }
					multiply = -1
					add = {
						add = var:power_per_plant
						subtract = 0.5					# add power_per_plant - 0.5 to ensure ceiling at divison
						divide = var:power_per_plant
					}
					if = {
						limit = { any_scope_building = { is_building_type = building_power_plant occupancy < 0.95 occupancy > 0 } }
						multiply = 0
					}
				}
			}
			if = {
				limit = { var:missing_powerplants > 0 }
				while = {
					count = var:missing_powerplants
					start_building_construction = building_power_plant
				}
			}
		}
	}
}
effect_tobacco_ban = {
	market = {
		every_scope_country = {
			limit = { NOT = { is_banning_goods = g:tobacco } }
			add_banned_goods = g:tobacco
			add_modifier = { name = tobacco_ban_authority }
		}
		every_scope_country = {
			limit = {
				OR = {
					any_scope_building = { is_building_type = building_tobacco_plantation }
					any_scope_building = { is_building_type = building_infres_tobacco_plantation }
				}
			}
			every_scope_state = { limit = { has_building = building_tobacco_plantation }		remove_building = building_tobacco_plantation }
			every_scope_state = { limit = { has_building = building_infres_tobacco_plantation }	remove_building = building_infres_tobacco_plantation }
		}
		every_scope_country = {
			limit = { any_primary_culture = { has_cultural_obsession = tobacco } }
			every_primary_culture = {
				limit = { has_cultural_obsession = tobacco }
				remove_cultural_obsession = tobacco
			}
		}
	}
}
effect_remove_tobacco_ban = {
	market = {
		every_scope_country = {
			limit = { is_banning_goods = g:tobacco }
			remove_banned_goods = g:tobacco
			remove_modifier = tobacco_ban_authority
		}
	}
}
effect_default_import_export = {	# set_tariffs_no_priority	set_tariffs_export_priority	set_tariffs_import_priority
	# Military
	set_tariffs_export_priority	= g:ammunition
	set_tariffs_export_priority	= g:small_arms
	set_tariffs_export_priority	= g:artillery
	set_tariffs_export_priority	= g:aeroplanes
	set_tariffs_export_priority	= g:tanks
	set_tariffs_export_priority	= g:manowars
	set_tariffs_export_priority	= g:ironclads
	# Staple
	set_tariffs_export_priority	= g:fabric
	set_tariffs_export_priority	= g:wood
	set_tariffs_export_priority	= g:groceries
	set_tariffs_export_priority	= g:clothes
	set_tariffs_export_priority	= g:furniture
	set_tariffs_export_priority	= g:paper
	# Industrial
	set_tariffs_export_priority	= g:clippers
	set_tariffs_export_priority	= g:steamers
	set_tariffs_export_priority	= g:silk
	set_tariffs_export_priority	= g:dye
	set_tariffs_export_priority	= g:sulfur
	set_tariffs_export_priority	= g:coal
	set_tariffs_import_priority	= g:iron
	set_tariffs_import_priority	= g:lead
	set_tariffs_export_priority	= g:hardwood
	if = {
		limit = { has_technology_researched = plastics }
		set_tariffs_export_priority			= g:rubber
	}
	else = { set_tariffs_import_priority	= g:rubber }
	set_tariffs_export_priority	= g:oil
	set_tariffs_export_priority	= g:engines
	# set_tariffs_no_priority		= g:steel
	# set_tariffs_no_priority		= g:glass
	set_tariffs_export_priority	= g:fertilizer
	set_tariffs_export_priority	= g:explosives
	set_tariffs_export_priority	= g:explosives
	set_tariffs_export_priority	= g:tools
	# Luxury
	set_tariffs_export_priority	= g:porcelain
	set_tariffs_export_priority	= g:luxury_clothes
	set_tariffs_export_priority	= g:luxury_furniture
	set_tariffs_export_priority	= g:meat
	set_tariffs_export_priority	= g:fruit
	set_tariffs_export_priority	= g:sugar
	set_tariffs_export_priority	= g:liquor
	set_tariffs_export_priority	= g:wine
	set_tariffs_export_priority	= g:tea
	set_tariffs_export_priority	= g:coffee
	set_tariffs_export_priority	= g:tobacco
	set_tariffs_export_priority	= g:opium
	set_tariffs_export_priority	= g:automobiles
	set_tariffs_export_priority	= g:telephones
	set_tariffs_export_priority	= g:radios
	set_tariffs_export_priority	= g:fine_art
}
# Fallback
# if	= {
	# limit = {
		# OR = {
			# NOT = { has_building = building_railway }	# Fallback for when you don't have any railway at all
			# any_scope_building = { is_building_type = building_railway has_active_production_method = pm_early_trains } }
		# }
	# value = 20
# }